Market Data Analysis Application
========================================================
author: Darrel Schwarz
date: 12th August 2019
autosize: true



First Slide 1
========================================================

For more details on authoring R presentations please visit <https://support.rstudio.com/hc/en-us/articles/200486468>.

- Bullet 1
- Bullet 2
- Bullet 3

By selecting two stocks using the drop down list the application will then plot these against the SP500 using plotly.  This is an interactive plot.

<iframe src="Capture.PNG" style="align:absolute;height:80%;width:80%"></iframe>


Closing Market Chart
========================================================
```{r echo=FALSE, message=FALSE,results="hide",cache=TRUE}
library(quantmod)
library(plotly)
tsnames <- c("Date","Ticker","Open","High","Low","Close","Volume","Adjusted")
getSymbols(c("GOOG","^GSPC","AAPL"),src='yahoo',warnings=F)
dfa <- data.frame(Date=index(AAPL),Ticker="AAPL",coredata(AAPL))
names(dfa) <- tsnames
dfg <- data.frame(Date=index(GOOG),Ticker="GOOG",coredata(GOOG))
names(dfg) <- tsnames
dfs <- data.frame(Date=index(GSPC),Ticker="^GSPC",coredata(GSPC))
names(dfs) <- tsnames
dfs$Ticker <- "SP500"
dff <- rbind(dfa,dfg,dfs)
p <- dff %>% plot_ly(type = 'scatter', mode = 'lines') %>%
             add_trace(x=~Date, y=~Close, name="AAPL",
                       line=list(color="green"),
                       transforms = list(list(type = 'filter',
                                              target = ~Ticker,
                                              operation = '=',
                                              value = "AAPL"))) %>%
            add_trace(x=~Date, y=~Close, name="GOOG",
                      line=list(color="lightblue"),
                      transforms = list(list(type = 'filter',
                                             target = ~Ticker,
                                             operation = '=',
                                             value = "GOOG"))) %>%
            add_trace(x=~Date, y=~Close, name="SP500",yaxis = "y2",
                      line=list(color="lightgreen"),
                      transforms = list(list(type = 'filter',
                                             target = ~Ticker,
                                             operation = '=',
                                             value = "SP500"))) %>%
            layout(title = "Closing Market Prices",
               xaxis = list(title = "Dates", gridcolor = "#bfbfbf", domain = c(0, 0.98)),
               yaxis = list(title = "Stock Price", gridcolor = "#bfbfbf"),
               yaxis2 = list(title = "SP500", side = "right", overlaying = "y"))

htmlwidgets::saveWidget(as_widget(p), file = "plot1.html")
```

Slide With Plot 3
========================================================

<iframe src="plot1.html" style="align:absolute;height:100%;width:100%"></iframe>



```{r echo=TRUE, messages=FALSE}
```


Slide With Plot 4
========================================================

```{r eval=FALSE}
    # Table 1 - Profit/Loss for period
    output$table <- shiny::renderDataTable({
        tic <- c(input$tickerInput1,input$tickerInput2,"SP500")
        wdfs <- dfs[dfs$Date >=input$dateRange1[1]& dfs$Date <=input$dateRange1[2],]
        
        mind <- min(date(wdfs$Date))
        maxd <- max(date(wdfs$Date))
        
        wdfs2 <- wdfs[wdfs$Date %in% c(mind,maxd) & 
                      wdfs$Ticker %in% tic,]
        
        initc <- wdfs2$Close[wdfs2$Date==mind & wdfs2$Ticker%in% tic]
        finalc <- wdfs2$Close[wdfs2$Date==maxd & wdfs2$Ticker%in% tic]
        
        initq <- trunc(input$invest/initc,0) # initial quantity
        initv <- round(initq * initc,2)      # initial value
        finalv <- round(initq * finalc,2)    # final value
        prof <- finalv - initv               # profit
        pprof <- round(finalv/initv*100,2)   # profit percentage
        
        as.data.frame(list(Ticker=unique(wdfs2$Ticker),
                           Quantity=initq,
                           InitialValue=initv,
                           CurrentValue=finalv,
                           Profit=prof, 
                           Percentage=pprof)) 
    
    })

    # Table2 - Market Data for selected stocks and SP500
    output$table2 <- shiny::renderDataTable({
        dfs[dfs$Date >=input$dateRange2[1] & dfs$Date <=input$dateRange2[2] & dfs$Ticker %in% c(input$tickerInput1,input$tickerInput2,"SP500"),]
    })

```
